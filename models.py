# models.py
from __future__ import annotations

from typing import Any, Dict, List, Optional, Tuple
from pydantic import BaseModel, Field
from pathlib import Path


class NodeStatus(BaseModel):
    """Runtime status per node (internal; not LLM-facing)."""

    state: str = Field(default="pending")  # pending | running | succeeded | failed
    attempts: int = Field(default=0)
    last_error: Optional[str] = None


class GraphState(BaseModel):
    """
    Represents the shared state of the graph.
    It's a blackboard that nodes can read from and write to.
    """

    # Inputs
    output_dir: Path
    user_request: str
    general_context: str
    schema_snapshot: str
    example_queries: str

    # High-level textual plan from the first LLM call
    process: Optional[List[str]] = None

    # The structured DAG plan generated by the planner
    plan: Optional[Dict[str, Any]] = None

    # A dictionary to store the output artifacts of each node
    artifacts: Dict[str, Any] = Field(default_factory=dict)

    executed_queries: Dict[str, Any] = Field(default_factory=dict)

    # Runtime bookkeeping
    node_status: Dict[str, NodeStatus] = Field(default_factory=dict)
    current_node_id: Optional[str] = None
    last_output: Optional[Dict[str, Any]] = None

    # Safety caps
    total_attempts: int = 0
    issues: List[Dict[str, Any]] = Field(default_factory=list)
