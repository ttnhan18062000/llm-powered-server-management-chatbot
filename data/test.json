[
    {
        "use_case_id": 1,
        "description": "Fulfill a specific customer order by checking stock, reserving inventory, and updating the order status. This ensures that stock is available before an order is marked as ready for shipment.",
        "solution": {
            "text": "First, retrieve all items for a pending order. Then, for each item, check the available stock (quantity - reserved_qty) at the designated warehouse. If stock is sufficient for all items, update the inventory by increasing the 'reserved_qty' and update the order's status to 'allocated'.",
            "queries": [
                {
                    "step": 1,
                    "query_description": "Get all products and quantities for a specific 'pending' order.",
                    "query": "SELECT oi.product_id, oi.quantity FROM order_items oi JOIN orders o ON oi.order_id = o.id WHERE o.id = ? AND o.status = 'pending';"
                },
                {
                    "step": 2,
                    "query_description": "For a given product, check the available inventory in a specific warehouse.",
                    "query": "SELECT (quantity - reserved_qty) AS available_stock FROM inventory WHERE product_id = ? AND warehouse_id = ?;"
                },
                {
                    "step": 3,
                    "query_description": "If stock is available, reserve the required quantity for the product in the inventory.",
                    "query": "UPDATE inventory SET reserved_qty = reserved_qty + ? WHERE product_id = ? AND warehouse_id = ?;"
                },
                {
                    "step": 4,
                    "query_description": "After reserving all items, update the order status to 'allocated'.",
                    "query": "UPDATE orders SET status = 'allocated' WHERE id = ?;"
                }
            ]
        }
    },
    {
        "use_case_id": 2,
        "description": "Process the arrival of a supplier's shipment at a warehouse. This involves updating the purchase order status, increasing the on-hand stock quantity, and logging the inbound movement for auditing.",
        "solution": {
            "text": "First, find all items associated with an 'approved' or 'shipped' purchase order. Then, for each item received, update the inventory to increase the on-hand quantity. Log a corresponding 'inbound' stock movement for tracking purposes. Finally, update the purchase order status to 'received'.",
            "queries": [
                {
                    "step": 1,
                    "query_description": "Fetch items from a specific purchase order to be received.",
                    "query": "SELECT product_id, quantity FROM purchase_order_items WHERE purchase_order_id = ?;"
                },
                {
                    "step": 2,
                    "query_description": "Increase the on-hand quantity for a received product in the warehouse's inventory.",
                    "query": "UPDATE inventory SET quantity = quantity + ? WHERE product_id = ? AND warehouse_id = ?;"
                },
                {
                    "step": 3,
                    "query_description": "Create a stock movement record to log the inbound goods.",
                    "query": "INSERT INTO stock_movements (warehouse_id, product_id, movement_type, quantity, reference_id, reference_type) VALUES (?, ?, 'inbound', ?, ?, 'purchase');"
                },
                {
                    "step": 4,
                    "query_description": "Mark the purchase order as 'received'.",
                    "query": "UPDATE purchase_orders SET status = 'received', received_date = CURRENT_TIMESTAMP WHERE id = ?;"
                }
            ]
        }
    },
    {
        "use_case_id": 3,
        "description": "Identify all products in a specific warehouse that have fallen below their reorder level and find the most recent supplier for each to initiate a new purchase.",
        "solution": {
            "text": "First, query the inventory to find all products where the current quantity is less than the product's defined reorder level for a given warehouse. Then, for each of those products, find the most recent purchase order to identify the last supplier it was purchased from. This provides the necessary information to create a new purchase order.",
            "queries": [
                {
                    "step": 1,
                    "query_description": "Find all products in a warehouse that are below their reorder level.",
                    "query": "SELECT p.id, p.sku, p.name, i.quantity, p.reorder_level FROM products p JOIN inventory i ON p.id = i.product_id WHERE i.warehouse_id = ? AND i.quantity < p.reorder_level;"
                },
                {
                    "step": 2,
                    "query_description": "For a low-stock product, find the ID of the most recent purchase order.",
                    "query": "SELECT po.id FROM purchase_orders po JOIN purchase_order_items poi ON po.id = poi.purchase_order_id WHERE poi.product_id = ? ORDER BY po.order_date DESC LIMIT 1;"
                },
                {
                    "step": 3,
                    "query_description": "Using the purchase order ID, retrieve the name of the supplier.",
                    "query": "SELECT s.name FROM suppliers s JOIN purchase_orders po ON s.id = po.supplier_id WHERE po.id = ?;"
                }
            ]
        }
    },
    {
        "use_case_id": 4,
        "description": "Perform a physical stock count, record any discrepancies, update the system inventory to match the physical count, and log an adjustment movement.",
        "solution": {
            "text": "First, retrieve the current system quantity for a product in a warehouse. Second, insert a new record into the inventory_audits table with the system count, the new physical count, and the calculated discrepancy. Third, update the inventory table with the correct physical quantity. Finally, log an 'adjustment' in the stock movements table to provide an audit trail for the change.",
            "queries": [
                {
                    "step": 1,
                    "query_description": "Get the current system quantity for a product.",
                    "query": "SELECT quantity FROM inventory WHERE warehouse_id = ? AND product_id = ?;"
                },
                {
                    "step": 2,
                    "query_description": "Log the audit results, including the discrepancy.",
                    "query": "INSERT INTO inventory_audits (warehouse_id, product_id, system_qty, physical_qty, discrepancy, auditor) VALUES (?, ?, ?, ?, ? - ?, ?);"
                },
                {
                    "step": 3,
                    "query_description": "Update the inventory quantity to the new physical count.",
                    "query": "UPDATE inventory SET quantity = ? WHERE warehouse_id = ? AND product_id = ?;"
                },
                {
                    "step": 4,
                    "query_description": "Create a stock movement record for the adjustment.",
                    "query": "INSERT INTO stock_movements (warehouse_id, product_id, movement_type, quantity, reference_type, notes) VALUES (?, ?, 'adjustment', ?, 'manual', 'Stock audit adjustment');"
                }
            ]
        }
    },
    {
        "use_case_id": 5,
        "description": "Find a customer's complete order history, including the current shipment status and tracking number for any orders that have been shipped.",
        "solution": {
            "text": "First, find the customer's ID using their email address. Then, retrieve all orders associated with that customer ID. Finally, for each order, join with the shipments table to get the carrier, tracking number, and current shipment status if a shipment exists.",
            "queries": [
                {
                    "step": 1,
                    "query_description": "Get the customer ID from their email.",
                    "query": "SELECT id FROM customers WHERE email = ?;"
                },
                {
                    "step": 2,
                    "query_description": "Retrieve all orders placed by that customer.",
                    "query": "SELECT id, status, order_date FROM orders WHERE customer_id = ? ORDER BY order_date DESC;"
                },
                {
                    "step": 3,
                    "query_description": "For a given order, fetch its shipment details if they exist.",
                    "query": "SELECT carrier, tracking_number, status, ship_date FROM shipments WHERE order_id = ?;"
                }
            ]
        }
    },
    {
        "use_case_id": 6,
        "description": "Calculate the total sales value for a specific product within a given date range to analyze its performance.",
        "solution": {
            "text": "First, get the product's ID from its SKU. Then, select all order items for that product where the order was placed within the specified time frame and has been delivered. Finally, sum the product of the quantity and unit price for these items to calculate the total revenue.",
            "queries": [
                {
                    "step": 1,
                    "query_description": "Get the product ID from its unique SKU.",
                    "query": "SELECT id FROM products WHERE sku = ?;"
                },
                {
                    "step": 2,
                    "query_description": "Calculate total revenue for delivered orders of that product within a date range.",
                    "query": "SELECT SUM(oi.quantity * oi.unit_price) AS total_revenue FROM order_items oi JOIN orders o ON oi.order_id = o.id WHERE oi.product_id = ? AND o.status = 'delivered' AND o.order_date BETWEEN ? AND ?;"
                }
            ]
        }
    },
    {
        "use_case_id": 7,
        "description": "Execute a stock transfer of a specific product from a source warehouse to a destination warehouse, ensuring the movement is tracked.",
        "solution": {
            "text": "This process requires four steps to ensure data integrity and auditability. First, decrease the product's quantity in the source warehouse. Second, increase its quantity in the destination warehouse. Third, log an 'outbound' transfer movement for the source warehouse. Fourth, log an 'inbound' transfer movement for the destination warehouse.",
            "queries": [
                {
                    "step": 1,
                    "query_description": "Decrease the stock quantity at the source warehouse.",
                    "query": "UPDATE inventory SET quantity = quantity - ? WHERE warehouse_id = ? AND product_id = ?;"
                },
                {
                    "step": 2,
                    "query_description": "Increase the stock quantity at the destination warehouse.",
                    "query": "UPDATE inventory SET quantity = quantity + ? WHERE warehouse_id = ? AND product_id = ?;"
                },
                {
                    "step": 3,
                    "query_description": "Log the outbound transfer movement from the source.",
                    "query": "INSERT INTO stock_movements (warehouse_id, product_id, movement_type, quantity, reference_type, notes) VALUES (?, ?, 'transfer', ?, 'manual', 'Transfer to warehouse ID ?');"
                },
                {
                    "step": 4,
                    "query_description": "Log the inbound transfer movement at the destination.",
                    "query": "INSERT INTO stock_movements (warehouse_id, product_id, movement_type, quantity, reference_type, notes) VALUES (?, ?, 'transfer', ?, 'manual', 'Transfer from warehouse ID ?');"
                }
            ]
        }
    },
    {
        "use_case_id": 8,
        "description": "Identify the top 5 most valuable customers in the last quarter based on the total value of their delivered orders.",
        "solution": {
            "text": "First, retrieve all orders with a 'delivered' status placed within the last quarter. Then, join these orders with their items to calculate the total value of each order. Finally, group the results by customer, sum the total value, and sort in descending order to find the top 5 customers, fetching their names for the final report.",
            "queries": [
                {
                    "step": 1,
                    "query_description": "Calculate the total value per delivered order in the last 90 days.",
                    "query": "SELECT o.customer_id, SUM(oi.quantity * oi.unit_price) AS order_value FROM orders o JOIN order_items oi ON o.id = oi.order_id WHERE o.status = 'delivered' AND o.delivered_date >= date('now', '-90 days') GROUP BY o.id;"
                },
                {
                    "step": 2,
                    "query_description": "Aggregate the total purchase value for each customer.",
                    "query": "SELECT customer_id, SUM(order_value) AS total_customer_value FROM (SELECT o.id, o.customer_id, SUM(oi.quantity * oi.unit_price) AS order_value FROM orders o JOIN order_items oi ON o.id = oi.order_id WHERE o.status = 'delivered' AND o.delivered_date >= date('now', '-90 days') GROUP BY o.id) AS customer_orders GROUP BY customer_id;"
                },
                {
                    "step": 3,
                    "query_description": "Get the names of the top 5 customers by total value.",
                    "query": "SELECT c.name, SUM(oi.quantity * oi.unit_price) AS total_spent FROM customers c JOIN orders o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id WHERE o.status = 'delivered' AND o.delivered_date >= date('now', '-90 days') GROUP BY c.id, c.name ORDER BY total_spent DESC LIMIT 5;"
                }
            ]
        }
    },
    {
        "use_case_id": 9,
        "description": "Cancel a customer order that has not yet been shipped, releasing any reserved stock back into the available inventory.",
        "solution": {
            "text": "First, find all items and their allocated quantities for the specified order. Then, for each item, decrease the 'reserved_qty' in the inventory table by the allocated amount to make the stock available again. Finally, update the order's status to 'cancelled'.",
            "queries": [
                {
                    "step": 1,
                    "query_description": "Get all allocated items for the order to be cancelled.",
                    "query": "SELECT oi.product_id, oi.allocated_qty, s.warehouse_id FROM order_items oi JOIN shipments s ON oi.order_id = s.order_id WHERE oi.order_id = ? AND oi.allocated_qty > 0;"
                },
                {
                    "step": 2,
                    "query_description": "Release the reserved stock for each item back into inventory.",
                    "query": "UPDATE inventory SET reserved_qty = reserved_qty - ? WHERE product_id = ? AND warehouse_id = ?;"
                },
                {
                    "step": 3,
                    "query_description": "Update the order status to 'cancelled'.",
                    "query": "UPDATE orders SET status = 'cancelled' WHERE id = ?;"
                }
            ]
        }
    },
    {
        "use_case_id": 10,
        "description": "Audit a specific user's recent actions, such as order cancellations or manual stock adjustments, to review high-impact changes.",
        "solution": {
            "text": "First, get the user's ID from their username. Then, query the user_actions table for all actions performed by this user within a specific timeframe that match certain critical action types (e.g., 'order_cancelled', 'manual_adjustment'). Finally, for each retrieved action, fetch the details from the target table (e.g., orders, stock_movements) to provide full context.",
            "queries": [
                {
                    "step": 1,
                    "query_description": "Find the user ID for a given username.",
                    "query": "SELECT id FROM users WHERE username = ?;"
                },
                {
                    "step": 2,
                    "query_description": "Retrieve all critical actions performed by that user in the last 30 days.",
                    "query": "SELECT action, target_table, target_id, timestamp, details FROM user_actions WHERE user_id = ? AND action IN ('order_cancelled', 'manual_adjustment') AND timestamp >= date('now', '-30 days');"
                },
                {
                    "step": 3,
                    "query_description": "Get context for a specific action, for example, details of a cancelled order.",
                    "query": "SELECT customer_id, order_date, status FROM orders WHERE id = ?;"
                }
            ]
        }
    }
]